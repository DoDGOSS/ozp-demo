'use strict';

var locationLister = angular.module('LocationLister', [
  'ozpIwcClient',
  'ui.bootstrap'
]);
locationLister.controller('MainController', ['ozpIwcClient']);

locationLister.controller('MainController', function($scope, $log, $modal, iwc) {
  var locationList = new LocationList('/locationLister/listings');

  //=======================================
  // Location List UI Behavior
  //=======================================
  $scope.locations = locationList.locations;

  // Called when the "Add Location" button is pressed
  // Opens popup modal, resolves with the input data.
  // Autogenerates the resouce in the locationList collection.
  $scope.addListing = function(location) {
    return $scope.locationModal(location).then(function(output) {

      return locationList.addLocation(output.listing).catch(function(e) {
        console.log(e);
      });
    });
  };

  // Called when "Edit" is clicked.
  $scope.editLocation = function(location) {
    if (location) {
      $scope.locationModal(location.value).then(function(output) {
        // Use the location's reference to update the resource
        location.update(output.listing);
      });
    }
  };

  // Called when a Location is selected.
  $scope.handleLocationSelect = function(location) {
    $scope.selectedLocation = location;
  };

  //=======================================
  // Map Intent (Remote)
  //=======================================
  $scope.map = new Intent("/json/coord/map");

  //=======================================
  // Analyze Intent (Remote)
  //=======================================
  $scope.analyze = new Intent("/json/coord/analyze");

  //=======================================
  // Save Intent (Register for Remotes)
  //=======================================
  var save = new Intent("/json/coord/save");

  // Runtime-generated url for the icon in the intent's metaData.
  var iconPath = (function() {
    var removeAt = window.location.href.indexOf('/index.html');
    var newPath = window.location.href.substring(0, removeAt);
    if (removeAt < 0 && window.location.href[window.location.href.length - 1] === '/') {
      newPath = window.location.href.substring(0, window.location.href.length - 1);
    }
    return newPath + "/icon.png";
  }());

  var metaData = {
    icon: iconPath,
    label: "Location Lister"
  };

  // The functionality to share. Opens the modal for saving the received location.
  var saveLocation = function(location) {
    if (location && location.title && location.coords) {
    // Return the resource path to the invoker
      return $scope.addListing(location);
    }
  };

  save.register(metaData, saveLocation);

  //=======================================
  // Location modal
  //=======================================
  $scope.locationModal = function(listing) {
    var modalInstance = $modal.open({
      templateUrl: "templates/modal.html",
      controller: "EditController",
      resolve: {
        listing: function() {
          return listing;
        }
      }
    });

    return modalInstance.result;
  };

  //=======================================
  // Location
  //
  // IWC References (Uses in this application):
  // API: Data
  // Resource: /locationLister/listings/<AutoGenerated ID>
  // Collects: none
  //=======================================
  function Location(resource) {
    this.reference = new iwc.data.Reference(resource);
    this.resource = resource;
    this.update = this.reference.set;
    this.delete = this.reference.delete;
    this.value = {};
    var self = this;

    var onChange = function(changes) {
      self.value = changes.newValue;
      $scope.$apply();
    };

    this.reference.watch(onChange).then(function(val) {
      self.value = val;
      $scope.$apply();
    });
  }

  //=======================================
  // Location List: a collection of Locations
  //
  // IWC References (Uses in this application):
  // API: Data
  // Resource: /locationLister/listings/*
  // Collects: none
  //=======================================
  function LocationList(resource) {
    this.reference = new iwc.data.Reference(resource, {
      collect: true
    });
    this.addLocation = this.reference.addChild;
    this.locations = {};
    var self = this;

    var handleCollection = function(collection) {
      collection.forEach(function(resource) {
        if (!self.locations[resource]) {
          self.locations[resource] = new Location(resource);
        }
      });
      $scope.$apply();
    };

    var onCollectionChange = function(changes) {
      handleCollection(changes.newCollection);
    };

    // Watch For new locations added to the collection
    this.reference.watch(onCollectionChange);
    // Get the initial collection
    this.reference.list().then(handleCollection);
  }

  //=======================================
  // Intent: A wrapper for invoking remote functions
  //         as well as tracking the number of
  //         matching functions.
  //
  // IWC References (Uses in this application):
  // API: Intents
  // Resource: /json/coord/map
  // Collects: /json/coord/map/*
  //
  // Resource: /json/coord/analyze
  // Collects: /json/coord/analyze/*
  //
  // Resource: /json/coord/save
  // Collects: /json/coord/save/*
  //=======================================
  function Intent(resource) {
    // collection enabled to tie # of handlers to the UI
    this.reference = new iwc.intents.Reference(resource, {
      collect: true
    });
    this.run = this.reference.invoke;
    this.register = this.reference.register;
    this.handlers = [];

    var self = this;

    var handleCollection = function(collection) {
      self.handlers = collection;
      $scope.$apply();
    };

    var onCollectionChange = function(changes) {
      handleCollection(changes.newCollection);
    };

    // Watch for updates the the collection
    this.reference.watch(onCollectionChange);
    // Get initial collection
    this.reference.list().then(handleCollection);
  }
});


// This factory adds wrappings around the IWC client generation to allow
// query param bus selection and logs the Bus/Address upon connection.
//
// For most applications using the "ozpIwcClient" module is sufficient
// to receive the IWC Library.
locationLister.factory("iwc", function($location, $window, $log, iwcClient) {

  // Added functionality to allow the application to connect to a different IWC Bus
  // if "?ozpIwc.peer=<encodeURIComponent of the Bus URL>" is appended to
  // the application url.
  var ozpIwcPeerUrl = '';
  var queryParams = $location.search();
  if (queryParams.hasOwnProperty('ozpIwc.peer')) {
    ozpIwcPeerUrl = queryParams['ozpIwc.peer'];
    $log.debug('found IWC bus in query param: ' + ozpIwcPeerUrl);
  } else {
    ozpIwcPeerUrl = $window.OzoneConfig.iwcUrl;
  }

  var iwc = new iwcClient.Client(ozpIwcPeerUrl);

  iwc.connect().then(function() {
    $log.debug("Connected to IWC Bus: " + ozpIwcPeerUrl + "\nIWC Address: ", iwc.address);
  });

  return iwc;
});


locationLister.directive("locationList", function() {
  return {
    restrict: 'E',
    scope: {
      locations: "=locations",
      onselect: "=onselect",
      selected: "=selected"
    },
    templateUrl: 'templates/locationList.tpl.html'
  };
});

// Controller for the Add/Edit Location Modal
locationLister.controller("EditController", function($scope, $modalInstance, listing) {

  if (listing) {
    $scope.listing = listing;
  } else {
    $scope.listing = {
      title: '',
      coords: {
        lat: 0,
        long: 0
      },
      description: ''
    };
  }

  $scope.ok = function() {
    $modalInstance.close({
      listing: $scope.listing
    });
  };

  $scope.cancel = function() {
    $modalInstance.dismiss('cancel');
  };

});

// A filter to not display List View Items that are not of proper format.
locationLister.filter('filterLocations', function() {
  return function(input) {
    var inputArray = [];

    for (var item in input) {
      inputArray.push(input[item]);
    }

    return inputArray.filter(function(listing) {
      if (!listing || !listing.value) {
        return false;
      }

      if (typeof listing.value.title === "undefined") {
        return false;
      }

      if (!listing.value.coords ||
        typeof listing.value.coords.lat === "undefined" ||
        typeof listing.value.coords.long === "undefined") {
        return false;
      }

      return true;
    });
  };
});
